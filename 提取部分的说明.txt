
contour:带有轮廓信息的图像

cv2.RETR_TREE：提取轮廓后，输出轮廓信息的组织形式，除了cv2.RETR_TREE还有以下几种选项：

cv2.RETR_EXTERNAL：输出轮廓中只有外侧轮廓信息；

cv2.RETR_LIST：以列表形式输出轮廓信息，各轮廓之间无等级关系；

cv2.RETR_CCOMP：输出两层轮廓信息，即内外两个边界（下面将会说到contours的数据结构）；

cv2.RETR_TREE：以树形结构输出轮廓信息。

cv2.CHAIN_APPROX_SIMPLE：指定轮廓的近似办法，有以下选项：

cv2.CHAIN_APPROX_NONE：存储轮廓所有点的信息，相邻两个轮廓点在图象上也是相邻的；

cv2.CHAIN_APPROX_SIMPLE：压缩水平方向，垂直方向，对角线方向的元素，只保留该方向的终点坐标；

cv2.CHAIN_APPROX_TC89_L1：使用teh-Chinl chain 近似算法保存轮廓信息。

输出：

python3里返回三个值：image,contours,hierarchy

image：可能是跟输入contour类似的一张二值图；

contours：list结构，列表中每个元素代表一个边沿信息。每个元素是(x,1,2)的三维向量，x表示该条边沿里共有多少个像素点，第三维的那个“2”表示每个点的横、纵坐标；

注意：如果输入选择cv2.CHAIN_APPROX_SIMPLE，则contours中一个list元素所包含的x点之间应该用直线连接起来，这个可以用cv2.drawContours()函数观察一下效果。

hierarchy：返回类型是(x,4)的二维ndarray。x和contours里的x是一样的意思。如果输入选择cv2.RETR_TREE，则以树形结构组织输出，hierarchy的四列分别对应下一个轮廓编号、上一个轮廓编号、父轮廓编号、子轮廓编号，该值为负数表示没有对应项。
对提取所得contours的一些应用。

对输出的contours可以进行一些基本操作，比如计算contours[i]中所包括的点数，contours[i]的长度和面积等，下面列出求长度和面积用的函数：

求长度：cv2.arcLength(contours[i],False)

可以看到第二个参数是选择False还是True。这个参数指定识别的contours是否闭合，True对应闭合，False对应非闭合。

求面积：cv2.contourArea(contours[i])